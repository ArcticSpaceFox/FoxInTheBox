generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  user               User      @relation(fields: [userId], references: [id])
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

enum ROLE {
  USER
  MOD
  ADMIN
}

model User {
  id            Int         @id @default(autoincrement())
  name          String?
  role          ROLE        @default(USER)
  email         String?     @unique
  emailVerified DateTime?   @map(name: "email_verified")
  image         String?
  challenges    Challenge[] @relation("creatorRelation")
  bloods        Challenge[] @relation("firstBloodRelation")
  solves        Challenge[] @relation("solvesRelation")
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @default(now()) @map(name: "updated_at")

  Account Account[]
  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Competition {
  id         Int         @id @default(autoincrement())
  name       String
  startTime  DateTime
  endTime    DateTime
  createdAt  DateTime    @default(now())
  challenges Challenge[]

  @@map("competitions")
}

model Challenge {
  id               Int          @id @default(autoincrement())
  name             String
  creator          User         @relation("creatorRelation", fields: [creatorID], references: [id])
  creatorID        Int
  reviewed         Boolean      @default(false)
  public           Boolean      @default(false)
  // URL to file
  file             String
  // URL to writeUp
  writeUp          String
  flag             String
  // stats
  firstBlood       User?        @relation("firstBloodRelation", fields: [firstBloodUserId], references: [id])
  firstBloodUserId Int?
  solves           User[]       @relation("solvesRelation")
  createdAt        DateTime     @default(now())
  Competition      Competition? @relation(fields: [competitionId], references: [id])
  competitionId    Int?

  @@map("challenges")
}
