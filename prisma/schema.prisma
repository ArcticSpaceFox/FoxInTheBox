generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  user               User      @relation(fields: [userId], references: [id])
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

enum ROLE {
  USER
  CREATOR
  MOD
  ADMIN
}

model User {
  id            Int          @id @default(autoincrement())
  name          String?
  role          ROLE         @default(USER)
  email         String?      @unique
  emailVerified DateTime?    @map(name: "email_verified")
  image         String?
  challenges    Box[]        @relation("creatorRelation")
  bloods        Box[]        @relation("firstBloodRelation")
  solves        Solve[]
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @default(now()) @map(name: "updated_at")
  Account       Account[]
  Competition   Competition? @relation(fields: [competitionId], references: [id])
  competitionId Int?

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Competition {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  prizes      Int      @default(0)
  sponsors    String[]
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
  challenges  Box[]
  editors     User[]

  @@map("competitions")
}

// [Category] holds info about box category
enum Category {
  CRYPTO
  MISC
  REVERSING
  FORENSICS
  PWNING
  WEB
  CODING
  MYSTERY
}

// [Difficulty] will show how hard a challenge is and determine points for challenge
enum Difficulty {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

// [Solve] saves a solve for a box
model Solve {
  id        Int      @id @default(autoincrement())
  isBlood   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  Box       Box?     @relation(fields: [boxId], references: [id])
  boxId     Int?
  points    Int      @default(0)
  createdAt DateTime @default(now())
}

// [Box] holds all info on a certain box
model Box {
  id               Int          @id @default(autoincrement())
  name             String       @unique
  description      String?
  creator          User         @relation("creatorRelation", fields: [creatorID], references: [id])
  creatorID        Int
  reviewed         Boolean      @default(false)
  public           Boolean      @default(false)
  difficulty       Difficulty
  category         Category     @default(MYSTERY)
  file             String
  writeUp          String
  // flag in hash format so db dump will not reveil soloution
  flag             String
  // stats
  firstBlood       User?        @relation("firstBloodRelation", fields: [firstBloodUserId], references: [id])
  firstBloodUserId Int?
  solves           Solve[]
  createdAt        DateTime     @default(now())
  Competition      Competition? @relation(fields: [competitionId], references: [id])
  competitionId    Int?

  @@map("challenges")
}
